class Solution {
private:
    // recursion
    int r(int i, int j, vector<vector<int>>& grid) {
        if(i<0 || j <0 || grid[i][j]) return 0;
        if(i == 0 && j == 0) return 1;

        int up = r(i-1, j, grid);
        int down = r(i, j-1, grid);
        
        return up + down;
    }
    // memoization
    int f(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& dp) {
        if(i<0 || j <0 || grid[i][j]) return 0;
        if(i == 0 && j == 0) return 1;

        if(dp[i][j] != -1) return dp[i][j];
        int up = f(i-1,j, grid, dp);
        int down = f(i,j-1, grid, dp);
        
        return dp[i][j] =  up + down;
    }
    // tabulation
    int t(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<m; j++) {
                if( i == 0 && j == 0 && !grid[i][j]) {
                    dp[i][j] = 1;
                    continue;
                }else dp[i][j] = 0;
                if(grid[i][j]) continue;
                int up = 0, down = 0;
                if(i-1 >= 0 ) up = dp[i-1][j];
                if(j-1 >= 0 ) down = dp[i][j-1];
                dp[i][j] = up + down;
            }
        }
        return dp[n-1][m-1];
    }
    // space optimization
    int s(vector<vector<int>>& grid){
        int n = grid.size();
        int m = grid[0].size();
        vector<int> prev(m, 0);
        for(int i = 0; i<n; i++) {
            vector<int> cur(m, 0);
            for(int j = 0; j<m; j++) {
                if( i == 0 && j == 0 && !grid[i][j]) {
                    cur[j] = 1;
                    continue;
                }
                if(grid[i][j]) continue;
                int up = 0, down = 0;
                if(i-1 >= 0 ) up = prev[j];
                if(j-1 >= 0 ) down = cur[j-1];
                cur[j] = up + down;
            }
            prev = cur;
        }
        return prev[m-1];
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        // vector<vector<int>> dp(n, vector<int>(m, -1));
        // return f(n-1, m-1, grid, dp);
        return s(grid);
    }
};
